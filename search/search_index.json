{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rio-Tiler-PDS: A rio-tiler plugin for Public Datasets \u00b6 A rio-tiler plugin to read from publicly-available datasets. Important This is the new module for rio-tiler missions specific (ref: cogeotiff/rio-tiler#195 ) Documentation : cogeotiff.github.io/rio-tiler-pds/ Source Code : cogeotiff/rio-tiler-pds Installation \u00b6 You can install rio-tiler-pds using pip $ pip install -U pip $ pip install rio-tiler-pds or install from source: $ pip install -U pip $ pip install git+https://github.com/cogeotiff/rio-tiler-pds.git Datasets \u00b6 Data Level/Product Format Owner Region Bucket Type Sentinel 2 L1C JPEG2000 Sinergise / AWS eu-central-1 Requester-pays Sentinel 2 L2A JPEG2000 Sinergise / AWS eu-central-1 Requester-pays Sentinel 2 L2A COG Digital Earth Africa / AWS us-west-2 Public Sentinel 1 L1C COG (Internal GCPS) Sinergise / AWS eu-central-1 Requester-pays Landsat 8* L1 GTiff (External Overviews) Planet / AWS us-west-2 Public Landsat Collection 2 L1,L2 COG USGS / AWS us-west-2 Requester-pays CBERS 4/4A L2/L4 COG AMS Kepler / AWS us-east-1 Requester-pays MODIS (modis-pds) MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA GTiff (External Overviews) - us-west-2 Public MODIS (astraea-opendata) MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 COG Astraea / AWS us-west-2 Requester-pays * Landsat 8 Collection 1 reader has been deprecated because the landsat-pds will be deleted on July 1 st 2021. For new applications, using Collection 2 is suggested. Adding more dataset : If you know of another publicly-available dataset that can easily be described with a \"scene id\", please feel free to open an issue . Warnings \u00b6 Requester-pays Buckets \u00b6 On AWS, sentinel2 , sentinel1 , cbers and modis (in astraea-opendata) datasets are stored in requester pays buckets. This means that the cost of GET and LIST requests and egress fees for downloading files outside the AWS region will be charged to the accessing users , not the organization hosting the bucket. For rio-tiler and rio-tiler-pds to work with such buckets, you'll need to set AWS_REQUEST_PAYER=\"requester\" in your shell environment. Partial reading on Cloud hosted dataset \u00b6 When reading data, rio-tiler-pds performs partial reads when possible. Hence performance will be best on data stored as Cloud Optimized GeoTIFF (COG) . It's important to note that Sentinel-2 scenes hosted on AWS are not in Cloud Optimized format but in JPEG2000 . Partial reads from JPEG2000 files are inefficient, and GDAL (the library underlying rio-tiler-pds and rasterio ) will need to make many GET requests and transfer a lot of data. This will be both slow and expensive, since AWS's JPEG2000 collection of Sentinel 2 data is stored in a requester pays bucket. Ref: Do you really want people using your data blog post. Overview \u00b6 Readers \u00b6 Each dataset has its own submodule (e.g sentinel2: rio_tiler_pds.sentinel.aws ) from rio_tiler_pds.landsat.aws import L8Reader , LandsatC2Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2JP2Reader , # JPEG2000 S2COGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader from rio_tiler_pds.modis.aws import MODISPDSReader , MODISASTRAEAReader All Readers are subclass of rio_tiler.io.BaseReader and inherit its properties/methods. Properties \u00b6 bounds : Scene bounding box crs : CRS of the bounding box geographic_bounds : bounding box in geographic projection (e.g WGS84) minzoom : WebMercator MinZoom (e.g 7 for Landsat8) maxzoom : WebMercator MaxZoom (e.g 12 for Landsat8) Methods \u00b6 info : Returns band's simple info (e.g nodata, band_descriptions, ....) statistics : Returns band's statistics (percentile, histogram, ...) tile : Read web mercator map tile from bands part : Extract part of bands preview : Returns a low resolution preview from bands point : Returns band's pixel value for a given lon,lat feature : Extract part of bands Other \u00b6 bands (property): List of available bands for each dataset Scene ID \u00b6 All readers take scene id as main input. The scene id is used internaly by the reader to derive the full path of the data. e.g: Landsat on AWS Because the Landsat AWS PDS follows a regular schema to store the data ( s3://{bucket}/c1/L8/{path}/{row}/{scene}/{scene}_{band}.TIF\" ), we can easily reconstruct the full band's path by parsing the scene id. from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.landsat.utils import sceneid_parser sceneid_parser ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) > { 'sensor' : 'C' , 'satellite' : '08' , 'processingCorrectionLevel' : 'L1TP' , 'path' : '016' , 'row' : '037' , 'acquisitionYear' : '2017' , 'acquisitionMonth' : '08' , 'acquisitionDay' : '13' , 'processingYear' : '2017' , 'processingMonth' : '08' , 'processingDay' : '14' , 'collectionNumber' : '01' , 'collectionCategory' : 'RT' , 'scene' : 'LC08_L1TP_016037_20170813_20170814_01_RT' , 'date' : '2017-08-13' } with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . _get_band_url ( \"B1\" )) > s3 : // landsat - pds / c1 / L8 / 016 / 037 / LC08_L1TP_016037_20170813_20170814_01_RT / LC08_L1TP_016037_20170813_20170814_01_RT_B1 . TIF Each dataset has a specific scene id format: Scene ID formats Landsat link: rio_tiler_pds.landsat.utils.sceneid_parser regex: ^L[COTEM]0[0-9]_L\\d{1}[A-Z]{2}_\\d{6}_\\d{8}_\\d{8}_\\d{2}_(T1|T2|RT)$ example: LC08_L1TP_016037_20170813_20170814_01_RT Sentinel 1 L1C link: rio_tiler_pds.sentinel.utils.s1_sceneid_parser regex: ^S1[AB]_(IW|EW)_[A-Z]{3}[FHM]_[0-9][SA][A-Z]{2}_[0-9]{8}T[0-9]{6}_[0-9]{8}T[0-9]{6}_[0-9A-Z]{6}_[0-9A-Z]{6}_[0-9A-Z]{4}$ example: S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B Sentinel 2 JPEG2000 and Sentinel 2 COG link: rio_tiler_pds.sentinel.utils.s2_sceneid_parser regex: ^S2[AB]_[0-9]{2}[A-Z]{3}_[0-9]{8}_[0-9]_L[0-2][A-C]$ or ^S2[AB]_L[0-2][A-C]_[0-9]{8}_[0-9]{2}[A-Z]{3}_[0-9]$ example: S2A_29RKH_20200219_0_L2A , S2A_L1C_20170729_19UDP_0 , S2A_L2A_20170729_19UDP_0 CBERS link: rio_tiler_pds.cbers.utils.sceneid_parser regex: ^CBERS_(4|4A)_\\w+_[0-9]{8}_[0-9]{3}_[0-9]{3}_L\\w+$ example: CBERS_4_MUX_20171121_057_094_L2 , CBERS_4_AWFI_20170420_146_129_L2 , CBERS_4_PAN10M_20170427_161_109_L4 , CBERS_4_PAN5M_20170425_153_114_L4 , CBERS_4A_WPM_20200730_209_139_L4 MODIS (PDS and Astraea) link: rio_tiler_pds.modis.utils.sceneid_parser regex: ^M[COY]D[0-9]{2}[A-Z0-9]{2}\\.A[0-9]{4}[0-9]{3}\\.h[0-9]{2}v[0-9]{2}\\.[0-9]{3}\\.[0-9]{13}$ example: MCD43A4.A2017006.h21v11.006.2017018074804 Band Per Asset/File \u00b6 rio-tiler-pds Readers assume that bands (e.g eo:band in STAC) are stored in separate files. $ aws s3 ls landsat-pds/c1/L8/013/031/LC08_L1TP_013031_20130930_20170308_01_T1/ LC08_L1TP_013031_20130930_20170308_01_T1_B1.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B10.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B11.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B2.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B3.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B4.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B5.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B6.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B7.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B8.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B9.TIF LC08_L1TP_013031_20130930_20170308_01_T1_BQA.TIF When reading data or metadata, readers will merge them. e.g with S2COGReader ( \"S2A_L2A_20170729_19UDP_0\" ) as sentinel : img = sentinel . tile ( 77 , 89 , 8 , bands = ( \"B01\" , \"B02\" ) assert img . data . shape == ( 2 , 256 , 256 ) stats = sentinel . statistics ( bands = ( \"B01\" , \"B02\" )) print ( stats ) >> { 'B01' : BandStatistics ( min = 2.0 , max = 17132.0 , mean = 2183.7570706659685 , count = 651247.0 , sum = 1422165241.0 , std = 3474.123975478363 , median = 370.0 , majority = 238.0 , minority = 2.0 , unique = 15112.0 , histogram = [ [ 476342.0 , 35760.0 , 27525.0 , 24852.0 , 24379.0 , 23792.0 , 20891.0 , 13602.0 , 3891.0 , 213.0 ], [ 2.0 , 1715.0 , 3428.0 , 5141.0 , 6854.0 , 8567.0 , 10280.0 , 11993.0 , 13706.0 , 15419.0 , 17132.0 ] ], valid_percent = 62.11 , masked_pixels = 397329.0 , valid_pixels = 651247.0 , percentile_2 = 179.0 , percentile_98 = 12465.0 ), 'B02' : BandStatistics ( min = 1.0 , max = 15749.0 , mean = 1941.2052554560712 , count = 651247.0 , sum = 1264204099.0 , std = 3130.545395156859 , median = 329.0 , majority = 206.0 , minority = 11946.0 , unique = 13904.0 , histogram = [ [ 479174.0 , 34919.0 , 27649.0 , 25126.0 , 24913.0 , 24119.0 , 20223.0 , 12097.0 , 2872.0 , 155.0 ], [ 1.0 , 1575.8 , 3150.6 , 4725.4 , 6300.2 , 7875.0 , 9449.8 , 11024.6 , 12599.4 , 14174.199999999999 , 15749.0 ] ], valid_percent = 62.11 , masked_pixels = 397329.0 , valid_pixels = 651247.0 , percentile_2 = 134.0 , percentile_98 = 11227.079999999958 )} print ( stats [ \"B01\" ] . min ) >> 2.0 Changes \u00b6 See CHANGES.md . Contribution & Development \u00b6 See CONTRIBUTING.md License \u00b6 See LICENSE.txt Authors \u00b6 The rio-tiler project was begun at Mapbox and has been transferred in January 2019. See AUTHORS.txt for a listing of individual contributors.","title":"Home"},{"location":"#rio-tiler-pds-a-rio-tiler-plugin-for-public-datasets","text":"A rio-tiler plugin to read from publicly-available datasets. Important This is the new module for rio-tiler missions specific (ref: cogeotiff/rio-tiler#195 ) Documentation : cogeotiff.github.io/rio-tiler-pds/ Source Code : cogeotiff/rio-tiler-pds","title":"Rio-Tiler-PDS: A rio-tiler plugin for Public Datasets"},{"location":"#installation","text":"You can install rio-tiler-pds using pip $ pip install -U pip $ pip install rio-tiler-pds or install from source: $ pip install -U pip $ pip install git+https://github.com/cogeotiff/rio-tiler-pds.git","title":"Installation"},{"location":"#datasets","text":"Data Level/Product Format Owner Region Bucket Type Sentinel 2 L1C JPEG2000 Sinergise / AWS eu-central-1 Requester-pays Sentinel 2 L2A JPEG2000 Sinergise / AWS eu-central-1 Requester-pays Sentinel 2 L2A COG Digital Earth Africa / AWS us-west-2 Public Sentinel 1 L1C COG (Internal GCPS) Sinergise / AWS eu-central-1 Requester-pays Landsat 8* L1 GTiff (External Overviews) Planet / AWS us-west-2 Public Landsat Collection 2 L1,L2 COG USGS / AWS us-west-2 Requester-pays CBERS 4/4A L2/L4 COG AMS Kepler / AWS us-east-1 Requester-pays MODIS (modis-pds) MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA GTiff (External Overviews) - us-west-2 Public MODIS (astraea-opendata) MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 COG Astraea / AWS us-west-2 Requester-pays * Landsat 8 Collection 1 reader has been deprecated because the landsat-pds will be deleted on July 1 st 2021. For new applications, using Collection 2 is suggested. Adding more dataset : If you know of another publicly-available dataset that can easily be described with a \"scene id\", please feel free to open an issue .","title":"Datasets"},{"location":"#warnings","text":"","title":"Warnings"},{"location":"#requester-pays-buckets","text":"On AWS, sentinel2 , sentinel1 , cbers and modis (in astraea-opendata) datasets are stored in requester pays buckets. This means that the cost of GET and LIST requests and egress fees for downloading files outside the AWS region will be charged to the accessing users , not the organization hosting the bucket. For rio-tiler and rio-tiler-pds to work with such buckets, you'll need to set AWS_REQUEST_PAYER=\"requester\" in your shell environment.","title":"Requester-pays Buckets"},{"location":"#partial-reading-on-cloud-hosted-dataset","text":"When reading data, rio-tiler-pds performs partial reads when possible. Hence performance will be best on data stored as Cloud Optimized GeoTIFF (COG) . It's important to note that Sentinel-2 scenes hosted on AWS are not in Cloud Optimized format but in JPEG2000 . Partial reads from JPEG2000 files are inefficient, and GDAL (the library underlying rio-tiler-pds and rasterio ) will need to make many GET requests and transfer a lot of data. This will be both slow and expensive, since AWS's JPEG2000 collection of Sentinel 2 data is stored in a requester pays bucket. Ref: Do you really want people using your data blog post.","title":"Partial reading on Cloud hosted dataset"},{"location":"#overview","text":"","title":"Overview"},{"location":"#readers","text":"Each dataset has its own submodule (e.g sentinel2: rio_tiler_pds.sentinel.aws ) from rio_tiler_pds.landsat.aws import L8Reader , LandsatC2Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2JP2Reader , # JPEG2000 S2COGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader from rio_tiler_pds.modis.aws import MODISPDSReader , MODISASTRAEAReader All Readers are subclass of rio_tiler.io.BaseReader and inherit its properties/methods.","title":"Readers"},{"location":"#properties","text":"bounds : Scene bounding box crs : CRS of the bounding box geographic_bounds : bounding box in geographic projection (e.g WGS84) minzoom : WebMercator MinZoom (e.g 7 for Landsat8) maxzoom : WebMercator MaxZoom (e.g 12 for Landsat8)","title":"Properties"},{"location":"#methods","text":"info : Returns band's simple info (e.g nodata, band_descriptions, ....) statistics : Returns band's statistics (percentile, histogram, ...) tile : Read web mercator map tile from bands part : Extract part of bands preview : Returns a low resolution preview from bands point : Returns band's pixel value for a given lon,lat feature : Extract part of bands","title":"Methods"},{"location":"#other","text":"bands (property): List of available bands for each dataset","title":"Other"},{"location":"#scene-id","text":"All readers take scene id as main input. The scene id is used internaly by the reader to derive the full path of the data. e.g: Landsat on AWS Because the Landsat AWS PDS follows a regular schema to store the data ( s3://{bucket}/c1/L8/{path}/{row}/{scene}/{scene}_{band}.TIF\" ), we can easily reconstruct the full band's path by parsing the scene id. from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.landsat.utils import sceneid_parser sceneid_parser ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) > { 'sensor' : 'C' , 'satellite' : '08' , 'processingCorrectionLevel' : 'L1TP' , 'path' : '016' , 'row' : '037' , 'acquisitionYear' : '2017' , 'acquisitionMonth' : '08' , 'acquisitionDay' : '13' , 'processingYear' : '2017' , 'processingMonth' : '08' , 'processingDay' : '14' , 'collectionNumber' : '01' , 'collectionCategory' : 'RT' , 'scene' : 'LC08_L1TP_016037_20170813_20170814_01_RT' , 'date' : '2017-08-13' } with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . _get_band_url ( \"B1\" )) > s3 : // landsat - pds / c1 / L8 / 016 / 037 / LC08_L1TP_016037_20170813_20170814_01_RT / LC08_L1TP_016037_20170813_20170814_01_RT_B1 . TIF Each dataset has a specific scene id format: Scene ID formats Landsat link: rio_tiler_pds.landsat.utils.sceneid_parser regex: ^L[COTEM]0[0-9]_L\\d{1}[A-Z]{2}_\\d{6}_\\d{8}_\\d{8}_\\d{2}_(T1|T2|RT)$ example: LC08_L1TP_016037_20170813_20170814_01_RT Sentinel 1 L1C link: rio_tiler_pds.sentinel.utils.s1_sceneid_parser regex: ^S1[AB]_(IW|EW)_[A-Z]{3}[FHM]_[0-9][SA][A-Z]{2}_[0-9]{8}T[0-9]{6}_[0-9]{8}T[0-9]{6}_[0-9A-Z]{6}_[0-9A-Z]{6}_[0-9A-Z]{4}$ example: S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B Sentinel 2 JPEG2000 and Sentinel 2 COG link: rio_tiler_pds.sentinel.utils.s2_sceneid_parser regex: ^S2[AB]_[0-9]{2}[A-Z]{3}_[0-9]{8}_[0-9]_L[0-2][A-C]$ or ^S2[AB]_L[0-2][A-C]_[0-9]{8}_[0-9]{2}[A-Z]{3}_[0-9]$ example: S2A_29RKH_20200219_0_L2A , S2A_L1C_20170729_19UDP_0 , S2A_L2A_20170729_19UDP_0 CBERS link: rio_tiler_pds.cbers.utils.sceneid_parser regex: ^CBERS_(4|4A)_\\w+_[0-9]{8}_[0-9]{3}_[0-9]{3}_L\\w+$ example: CBERS_4_MUX_20171121_057_094_L2 , CBERS_4_AWFI_20170420_146_129_L2 , CBERS_4_PAN10M_20170427_161_109_L4 , CBERS_4_PAN5M_20170425_153_114_L4 , CBERS_4A_WPM_20200730_209_139_L4 MODIS (PDS and Astraea) link: rio_tiler_pds.modis.utils.sceneid_parser regex: ^M[COY]D[0-9]{2}[A-Z0-9]{2}\\.A[0-9]{4}[0-9]{3}\\.h[0-9]{2}v[0-9]{2}\\.[0-9]{3}\\.[0-9]{13}$ example: MCD43A4.A2017006.h21v11.006.2017018074804","title":"Scene ID"},{"location":"#band-per-assetfile","text":"rio-tiler-pds Readers assume that bands (e.g eo:band in STAC) are stored in separate files. $ aws s3 ls landsat-pds/c1/L8/013/031/LC08_L1TP_013031_20130930_20170308_01_T1/ LC08_L1TP_013031_20130930_20170308_01_T1_B1.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B10.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B11.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B2.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B3.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B4.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B5.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B6.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B7.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B8.TIF LC08_L1TP_013031_20130930_20170308_01_T1_B9.TIF LC08_L1TP_013031_20130930_20170308_01_T1_BQA.TIF When reading data or metadata, readers will merge them. e.g with S2COGReader ( \"S2A_L2A_20170729_19UDP_0\" ) as sentinel : img = sentinel . tile ( 77 , 89 , 8 , bands = ( \"B01\" , \"B02\" ) assert img . data . shape == ( 2 , 256 , 256 ) stats = sentinel . statistics ( bands = ( \"B01\" , \"B02\" )) print ( stats ) >> { 'B01' : BandStatistics ( min = 2.0 , max = 17132.0 , mean = 2183.7570706659685 , count = 651247.0 , sum = 1422165241.0 , std = 3474.123975478363 , median = 370.0 , majority = 238.0 , minority = 2.0 , unique = 15112.0 , histogram = [ [ 476342.0 , 35760.0 , 27525.0 , 24852.0 , 24379.0 , 23792.0 , 20891.0 , 13602.0 , 3891.0 , 213.0 ], [ 2.0 , 1715.0 , 3428.0 , 5141.0 , 6854.0 , 8567.0 , 10280.0 , 11993.0 , 13706.0 , 15419.0 , 17132.0 ] ], valid_percent = 62.11 , masked_pixels = 397329.0 , valid_pixels = 651247.0 , percentile_2 = 179.0 , percentile_98 = 12465.0 ), 'B02' : BandStatistics ( min = 1.0 , max = 15749.0 , mean = 1941.2052554560712 , count = 651247.0 , sum = 1264204099.0 , std = 3130.545395156859 , median = 329.0 , majority = 206.0 , minority = 11946.0 , unique = 13904.0 , histogram = [ [ 479174.0 , 34919.0 , 27649.0 , 25126.0 , 24913.0 , 24119.0 , 20223.0 , 12097.0 , 2872.0 , 155.0 ], [ 1.0 , 1575.8 , 3150.6 , 4725.4 , 6300.2 , 7875.0 , 9449.8 , 11024.6 , 12599.4 , 14174.199999999999 , 15749.0 ] ], valid_percent = 62.11 , masked_pixels = 397329.0 , valid_pixels = 651247.0 , percentile_2 = 134.0 , percentile_98 = 11227.079999999958 )} print ( stats [ \"B01\" ] . min ) >> 2.0","title":"Band Per Asset/File"},{"location":"#changes","text":"See CHANGES.md .","title":"Changes"},{"location":"#contribution-development","text":"See CONTRIBUTING.md","title":"Contribution &amp; Development"},{"location":"#license","text":"See LICENSE.txt","title":"License"},{"location":"#authors","text":"The rio-tiler project was begun at Mapbox and has been transferred in January 2019. See AUTHORS.txt for a listing of individual contributors.","title":"Authors"},{"location":"contributing/","text":"Development - Contributing \u00b6 Issues and pull requests are more than welcome: github.com/cogeotiff/rio-tiler-pds/issues dev install $ git clone https://github.com/cogeotiff/rio-tiler-pds.git $ cd rio-tiler-pds $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs \u00b6 pip install rio_tiler_pds[docs] Hot-reloading docs: git clone https://github.com/cogeotiff/rio-tiler-pds cd rio-tiler-pds mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): mkdocs gh-deploy","title":"Development - Contributing"},{"location":"contributing/#development-contributing","text":"Issues and pull requests are more than welcome: github.com/cogeotiff/rio-tiler-pds/issues dev install $ git clone https://github.com/cogeotiff/rio-tiler-pds.git $ cd rio-tiler-pds $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install","title":"Development - Contributing"},{"location":"contributing/#docs","text":"pip install rio_tiler_pds[docs] Hot-reloading docs: git clone https://github.com/cogeotiff/rio-tiler-pds cd rio-tiler-pds mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): mkdocs gh-deploy","title":"Docs"},{"location":"release-notes/","text":"Release Notes \u00b6 0.6.0 (2021-11-29) \u00b6 update rio-tiler requirement to >=3.0.0 breaking changes remove python 3.6 support sceneid -> input in Reader attributes remove .stats() and .metadata() methods bands is now optional for .info() and .statistics remove useless band_expression option 0.5.4 (2021-10-08) \u00b6 bands should be stored as tuple in sentinel-1 reader 0.5.3 (2021-10-08) \u00b6 Fix invalid sceneid parser for Sentinel-1 0.5.2 (2021-10-06) \u00b6 Fix available bands for Sentinel-1 based on Polarisation type ( cogeotiff/rio-tiler-pds!59 ) 0.5.1 (2021-06-25) \u00b6 fix landsat sceneid_parser for Collection 2 Albers dataset ( cogeotiff/rio-tiler-pds!56 ) allow standard and albers collections for Landsat Collection 2 reader ( cogeotiff/rio-tiler-pds!58 ) 0.5.0 (2021-02-02) \u00b6 add AWS's Landsat Collection 2 support (author @kylebarron, cogeotiff/rio-tiler-pds!42 ) add sentinel-2 product ID parsing (ref: cogeotiff/rio-tiler-pds!33 ). fix issue where the sequence number of a sentinel scene id can be two digit (ref: cogeotiff/rio-tiler-pds!35 ) fix issue where utm is only one sigle digit (ref: cogeotiff/rio-tiler-pds!34 ) add top level export ( cogeotiff/rio-tiler-pds#45 ) removes get_object from top level export add deprecation warning in L8Reader ( cogeotiff/rio-tiler-pds#40 ) 0.4.1 (2020-11-24) \u00b6 update for rio-tiler 2.0.0rc3 0.4.0 (2020-11-09) \u00b6 update for rio-tiler==2.0.0rc internal refactor of the Landsat8 reader add sentinel.aws.sentinel2.S2JP2Reader and aws.sentinel2.S2COGReader proxies to readers. from rio_tiler_pds.sentinel.aws import S2COGReader , S2JP2Reader with S2JP2Reader ( \"S2A_L2A_20170729_19UDP_0\" ) as scene : print ( type ( scene )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L2AReader '> with S2JP2Reader ( \"S2A_L1C_20170729_19UDP_0\" ) as scene : print ( type ( scene )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L1CReader '> with S2COGReader ( \"S2A_29RKH_20200219_0_L2A\" ) as scene : print ( type ( scene )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L2ACOGReader '> 0.3.2 (2020-10-13) \u00b6 add TMS options to adapt for rio-tiler 2.0.0b17 (ref: cogeotiff/rio-tiler!285 ) 0.3.1 (2020-10-07) \u00b6 remove pkg_resources ( pypa/setuptools#510 ) 0.3.0 (2020-10-03) \u00b6 Update sentinel2-cogs image path ( cogeotiff/rio-tiler-pds!22 ). Remove ContextManager requirement in base class and update for rio-tiler 2.0b13 ( cogeotiff/rio-tiler!265 ). Add MODIS (PDS and Astraea) dataset ( cogeotiff/rio-tiler-pds#18 ) move reader base classes to rio-tiler ( cogeotiff/rio-tiler-pds#24 ) add missing 0 (e.g \"B1\" -> \"B01\") when user forget it on sentinel and modis band names ( cogeotiff/rio-tiler-pds#25 ) 0.2.1 (2020-09-25) \u00b6 add support for CBERS-4A (author @fredliporace) 0.2.0 (2020-08-31) \u00b6 Revert the use of assets options to bands (#12) from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : # in 0.1.1 (PAST) tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) # in 0.2.0 (NOW) tile , data = landsat . tile ( x , y , z , bands = \"B1\" ) 0.1.1 (2020-08-28) \u00b6 avoid nodata options colision with kwargs in L8Reader 0.1.0 (2020-08-27) \u00b6 Initial release. Move code from rio-tiler Update for rio-tiler==2.0b8 (use COGReader and MultiBaseReader) Create new Classes (using attrs) and use ContextManager ( with Reader(\"sceneid\") as scene: ) Remove Landsat 8 pre-collection support Add Sentinel 2 COGs dataset support Use TileInfo.json and ProductInfo.json to retrieve Sentinel 1 & 2 bounds Use assets options instead of bands Add expression options in readers Readers \u00b6 from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader Example \u00b6 from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) tile , data = landsat . tile ( x , y , z , expression = \"B1/B2\" )","title":"Release"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#060-2021-11-29","text":"update rio-tiler requirement to >=3.0.0 breaking changes remove python 3.6 support sceneid -> input in Reader attributes remove .stats() and .metadata() methods bands is now optional for .info() and .statistics remove useless band_expression option","title":"0.6.0 (2021-11-29)"},{"location":"release-notes/#054-2021-10-08","text":"bands should be stored as tuple in sentinel-1 reader","title":"0.5.4 (2021-10-08)"},{"location":"release-notes/#053-2021-10-08","text":"Fix invalid sceneid parser for Sentinel-1","title":"0.5.3 (2021-10-08)"},{"location":"release-notes/#052-2021-10-06","text":"Fix available bands for Sentinel-1 based on Polarisation type ( cogeotiff/rio-tiler-pds!59 )","title":"0.5.2 (2021-10-06)"},{"location":"release-notes/#051-2021-06-25","text":"fix landsat sceneid_parser for Collection 2 Albers dataset ( cogeotiff/rio-tiler-pds!56 ) allow standard and albers collections for Landsat Collection 2 reader ( cogeotiff/rio-tiler-pds!58 )","title":"0.5.1 (2021-06-25)"},{"location":"release-notes/#050-2021-02-02","text":"add AWS's Landsat Collection 2 support (author @kylebarron, cogeotiff/rio-tiler-pds!42 ) add sentinel-2 product ID parsing (ref: cogeotiff/rio-tiler-pds!33 ). fix issue where the sequence number of a sentinel scene id can be two digit (ref: cogeotiff/rio-tiler-pds!35 ) fix issue where utm is only one sigle digit (ref: cogeotiff/rio-tiler-pds!34 ) add top level export ( cogeotiff/rio-tiler-pds#45 ) removes get_object from top level export add deprecation warning in L8Reader ( cogeotiff/rio-tiler-pds#40 )","title":"0.5.0 (2021-02-02)"},{"location":"release-notes/#041-2020-11-24","text":"update for rio-tiler 2.0.0rc3","title":"0.4.1 (2020-11-24)"},{"location":"release-notes/#040-2020-11-09","text":"update for rio-tiler==2.0.0rc internal refactor of the Landsat8 reader add sentinel.aws.sentinel2.S2JP2Reader and aws.sentinel2.S2COGReader proxies to readers. from rio_tiler_pds.sentinel.aws import S2COGReader , S2JP2Reader with S2JP2Reader ( \"S2A_L2A_20170729_19UDP_0\" ) as scene : print ( type ( scene )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L2AReader '> with S2JP2Reader ( \"S2A_L1C_20170729_19UDP_0\" ) as scene : print ( type ( scene )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L1CReader '> with S2COGReader ( \"S2A_29RKH_20200219_0_L2A\" ) as scene : print ( type ( scene )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L2ACOGReader '>","title":"0.4.0 (2020-11-09)"},{"location":"release-notes/#032-2020-10-13","text":"add TMS options to adapt for rio-tiler 2.0.0b17 (ref: cogeotiff/rio-tiler!285 )","title":"0.3.2 (2020-10-13)"},{"location":"release-notes/#031-2020-10-07","text":"remove pkg_resources ( pypa/setuptools#510 )","title":"0.3.1 (2020-10-07)"},{"location":"release-notes/#030-2020-10-03","text":"Update sentinel2-cogs image path ( cogeotiff/rio-tiler-pds!22 ). Remove ContextManager requirement in base class and update for rio-tiler 2.0b13 ( cogeotiff/rio-tiler!265 ). Add MODIS (PDS and Astraea) dataset ( cogeotiff/rio-tiler-pds#18 ) move reader base classes to rio-tiler ( cogeotiff/rio-tiler-pds#24 ) add missing 0 (e.g \"B1\" -> \"B01\") when user forget it on sentinel and modis band names ( cogeotiff/rio-tiler-pds#25 )","title":"0.3.0 (2020-10-03)"},{"location":"release-notes/#021-2020-09-25","text":"add support for CBERS-4A (author @fredliporace)","title":"0.2.1 (2020-09-25)"},{"location":"release-notes/#020-2020-08-31","text":"Revert the use of assets options to bands (#12) from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : # in 0.1.1 (PAST) tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) # in 0.2.0 (NOW) tile , data = landsat . tile ( x , y , z , bands = \"B1\" )","title":"0.2.0 (2020-08-31)"},{"location":"release-notes/#011-2020-08-28","text":"avoid nodata options colision with kwargs in L8Reader","title":"0.1.1 (2020-08-28)"},{"location":"release-notes/#010-2020-08-27","text":"Initial release. Move code from rio-tiler Update for rio-tiler==2.0b8 (use COGReader and MultiBaseReader) Create new Classes (using attrs) and use ContextManager ( with Reader(\"sceneid\") as scene: ) Remove Landsat 8 pre-collection support Add Sentinel 2 COGs dataset support Use TileInfo.json and ProductInfo.json to retrieve Sentinel 1 & 2 bounds Use assets options instead of bands Add expression options in readers","title":"0.1.0 (2020-08-27)"},{"location":"release-notes/#readers","text":"from rio_tiler_pds.landsat.aws import L8Reader from rio_tiler_pds.sentinel.aws import S1L1CReader from rio_tiler_pds.sentinel.aws import ( S2L1CReader , # JPEG2000 S2L2AReader , # JPEG2000 S2L2ACOGReader , # COG ) from rio_tiler_pds.cbers.aws import CBERSReader","title":"Readers"},{"location":"release-notes/#example","text":"from rio_tiler_pds.landsat.aws import L8Reader with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : tile , data = landsat . tile ( x , y , z , assets = \"B1\" ) tile , data = landsat . tile ( x , y , z , expression = \"B1/B2\" )","title":"Example"},{"location":"API/cbers/","text":"Readers \u00b6 class rio_tiler_pds.cbers.aws.cbers4. CBERSReader ( input , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset CBERS 4 reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 reader_options (dict, optional) \u2014 reader (type of COGReader, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset Max Zoom level. Not in init . minzoom (int) \u2014 Dataset Min Zoom level. Not in init . reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with CBERSReader ( 'CBERS_4_AWFI_20170420_146_129_L2' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch Reference band to get the bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch Reference band to get the bounds. Utils \u00b6 function rio_tiler_pds.cbers.utils. sceneid_parser ( sceneid ) Parse CBERS 4/4A scene id. Parameters sceneid (str) \u2014 CBERS 4/4A sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidCBERSSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'CBERS_4_MUX_20171121_057_094_L2' )","title":"CBERS"},{"location":"API/cbers/#readers","text":"class","title":"Readers"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset CBERS 4 reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 reader_options (dict, optional) \u2014 reader (type of COGReader, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset Max Zoom level. Not in init . minzoom (int) \u2014 Dataset Min Zoom level. Not in init . reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with CBERSReader ( 'CBERS_4_AWFI_20170420_146_129_L2' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch Reference band to get the bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method","title":"rio_tiler_pds.cbers.aws.cbers4.CBERSReader"},{"location":"API/cbers/#rio_tileriobasespatialmixintile_exists","text":"Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method","title":"rio_tiler.io.base.SpatialMixin.tile_exists"},{"location":"API/cbers/#rio_tileriobasemultibandreaderenter","text":"Support using with Context Managers. method","title":"rio_tiler.io.base.MultiBandReader.enter"},{"location":"API/cbers/#rio_tileriobasemultibandreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler.io.base.MultiBandReader.exit"},{"location":"API/cbers/#rio_tileriobasemultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/cbers/#rio_tileriobasemultibandreaderinfo","text":"Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/cbers/#rio_tileriobasemultibandreaderstatistics","text":"Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method","title":"rio_tiler.io.base.MultiBandReader.statistics"},{"location":"API/cbers/#rio_tileriobasemultibandreadertile","text":"Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.tile"},{"location":"API/cbers/#rio_tileriobasemultibandreaderpart","text":"Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.part"},{"location":"API/cbers/#rio_tileriobasemultibandreaderpreview","text":"Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.preview"},{"location":"API/cbers/#rio_tileriobasemultibandreaderpoint","text":"Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method","title":"rio_tiler.io.base.MultiBandReader.point"},{"location":"API/cbers/#rio_tileriobasemultibandreaderfeature","text":"Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.feature"},{"location":"API/cbers/#rio_tiler_pdscbersawscbers4cbersreaderattrs_post_init","text":"Fetch Reference band to get the bounds.","title":"rio_tiler_pds.cbers.aws.cbers4.CBERSReader.attrs_post_init"},{"location":"API/cbers/#utils","text":"function","title":"Utils"},{"location":"API/cbers/#rio_tiler_pdscbersutilssceneid_parser","text":"Parse CBERS 4/4A scene id. Parameters sceneid (str) \u2014 CBERS 4/4A sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidCBERSSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'CBERS_4_MUX_20171121_057_094_L2' )","title":"rio_tiler_pds.cbers.utils.sceneid_parser"},{"location":"API/landsat-c2/","text":"Readers \u00b6 class rio_tiler_pds.landsat.aws.landsat_collection2. LandsatC2Reader ( input , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , minzoom=5 , maxzoom=12 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Landsat Collection 2 COG Reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 Landsat 8 sceneid. reader_options (dict, optional) \u2014 reader (type of COGReader, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands. bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 12). minzoom (int) \u2014 Dataset's Min Zoom level (default is 5). reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. stac_item \u2014 tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with LandsatC2Reader ( 'LC08_L2SR_093106_20200207_20201016_02_T2' ) as scene : print ( scene . bounds ) >>> with LandsatC2Reader ( 'LC08_L1TP_116043_20201122_20201122_02_RT' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. get_geometry ( ) \u2014 Fetch geometry info for the scene. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch productInfo and get bounds. method get_geometry ( ) Fetch geometry info for the scene. Utils \u00b6 function rio_tiler_pds.landsat.utils. sceneid_parser ( sceneid ) Parse Landsat id. Author @perrygeo - www.perrygeo.com Parameters sceneid (str) \u2014 Landsat sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidLandsatSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'LC08_L1TP_016037_20170813_20170814_01_RT' )","title":"Landsat Collection 2"},{"location":"API/landsat-c2/#readers","text":"class","title":"Readers"},{"location":"API/landsat-c2/#rio_tiler_pdslandsatawslandsat_collection2landsatc2reader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Landsat Collection 2 COG Reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 Landsat 8 sceneid. reader_options (dict, optional) \u2014 reader (type of COGReader, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands. bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 12). minzoom (int) \u2014 Dataset's Min Zoom level (default is 5). reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. stac_item \u2014 tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with LandsatC2Reader ( 'LC08_L2SR_093106_20200207_20201016_02_T2' ) as scene : print ( scene . bounds ) >>> with LandsatC2Reader ( 'LC08_L1TP_116043_20201122_20201122_02_RT' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. get_geometry ( ) \u2014 Fetch geometry info for the scene. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method","title":"rio_tiler_pds.landsat.aws.landsat_collection2.LandsatC2Reader"},{"location":"API/landsat-c2/#rio_tileriobasespatialmixintile_exists","text":"Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method","title":"rio_tiler.io.base.SpatialMixin.tile_exists"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderenter","text":"Support using with Context Managers. method","title":"rio_tiler.io.base.MultiBandReader.enter"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler.io.base.MultiBandReader.exit"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderinfo","text":"Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderstatistics","text":"Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method","title":"rio_tiler.io.base.MultiBandReader.statistics"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreadertile","text":"Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.tile"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderpart","text":"Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.part"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderpreview","text":"Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.preview"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderpoint","text":"Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method","title":"rio_tiler.io.base.MultiBandReader.point"},{"location":"API/landsat-c2/#rio_tileriobasemultibandreaderfeature","text":"Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.feature"},{"location":"API/landsat-c2/#rio_tiler_pdslandsatawslandsat_collection2landsatc2readerattrs_post_init","text":"Fetch productInfo and get bounds. method","title":"rio_tiler_pds.landsat.aws.landsat_collection2.LandsatC2Reader.attrs_post_init"},{"location":"API/landsat-c2/#rio_tiler_pdslandsatawslandsat_collection2landsatc2readerget_geometry","text":"Fetch geometry info for the scene.","title":"rio_tiler_pds.landsat.aws.landsat_collection2.LandsatC2Reader.get_geometry"},{"location":"API/landsat-c2/#utils","text":"function","title":"Utils"},{"location":"API/landsat-c2/#rio_tiler_pdslandsatutilssceneid_parser","text":"Parse Landsat id. Author @perrygeo - www.perrygeo.com Parameters sceneid (str) \u2014 Landsat sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidLandsatSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'LC08_L1TP_016037_20170813_20170814_01_RT' )","title":"rio_tiler_pds.landsat.utils.sceneid_parser"},{"location":"API/landsat/","text":"Readers \u00b6 class rio_tiler_pds.landsat.aws.landsat8. L8Reader ( input , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> , reader=<class 'rio_tiler_pds.landsat.aws.landsat8.L8COGReader'> , reader_options=NOTHING , minzoom=7 , maxzoom=12 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Landsat 8 reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 Landsat 8 sceneid. reader_options (dict, optional) \u2014 reader (type of L8COGReader, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'BQA')). bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 12). minzoom (int) \u2014 Dataset's Min Zoom level (default is 7). mtl_metadata (dict) \u2014 Landsat 8 MTL document content. reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch MTL metadata and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , pan , **kwargs ) (ImageData) \u2014 Read multiple bands for a GeoJSON feature. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , pan , **kwargs ) (ImageData) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , pan , **kwargs ) (ImageData) \u2014 Return a preview from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , pan , **kwargs ) (ImageData) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method __attrs_post_init__ ( ) Fetch MTL metadata and get bounds. method tile ( tile_x , tile_y , tile_z , bands=None , expression='' , pan=False , **kwargs ) \u2192 ImageData Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (Union(sequence of str, str), optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 pan (bool, optional) \u2014 method part ( bbox , bands=None , expression='' , pan=False , **kwargs ) \u2192 ImageData Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (Union(sequence of str, str), optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 pan (bool, optional) \u2014 method preview ( bands=None , expression='' , pan=False , **kwargs ) \u2192 ImageData Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 pan (bool, optional) \u2014 method feature ( shape , bands=None , expression='' , pan=False , **kwargs ) \u2192 ImageData Read multiple bands for a GeoJSON feature. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (Union(sequence of str, str), optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 pan (bool, optional) \u2014 Utils \u00b6 function rio_tiler_pds.landsat.utils. sceneid_parser ( sceneid ) Parse Landsat id. Author @perrygeo - www.perrygeo.com Parameters sceneid (str) \u2014 Landsat sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidLandsatSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'LC08_L1TP_016037_20170813_20170814_01_RT' )","title":"Landsat"},{"location":"API/landsat/#readers","text":"class","title":"Readers"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8reader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Landsat 8 reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 Landsat 8 sceneid. reader_options (dict, optional) \u2014 reader (type of L8COGReader, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10', 'B11', 'BQA')). bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 12). minzoom (int) \u2014 Dataset's Min Zoom level (default is 7). mtl_metadata (dict) \u2014 Landsat 8 MTL document content. reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch MTL metadata and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , pan , **kwargs ) (ImageData) \u2014 Read multiple bands for a GeoJSON feature. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , pan , **kwargs ) (ImageData) \u2014 Read part of multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , pan , **kwargs ) (ImageData) \u2014 Return a preview from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , pan , **kwargs ) (ImageData) \u2014 Read a Mercator Map tile multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader"},{"location":"API/landsat/#rio_tileriobasespatialmixintile_exists","text":"Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method","title":"rio_tiler.io.base.SpatialMixin.tile_exists"},{"location":"API/landsat/#rio_tileriobasemultibandreaderenter","text":"Support using with Context Managers. method","title":"rio_tiler.io.base.MultiBandReader.enter"},{"location":"API/landsat/#rio_tileriobasemultibandreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler.io.base.MultiBandReader.exit"},{"location":"API/landsat/#rio_tileriobasemultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/landsat/#rio_tileriobasemultibandreaderinfo","text":"Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/landsat/#rio_tileriobasemultibandreaderstatistics","text":"Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method","title":"rio_tiler.io.base.MultiBandReader.statistics"},{"location":"API/landsat/#rio_tileriobasemultibandreaderpoint","text":"Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method","title":"rio_tiler.io.base.MultiBandReader.point"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerattrs_post_init","text":"Fetch MTL metadata and get bounds. method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.attrs_post_init"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readertile","text":"Read a Mercator Map tile multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (Union(sequence of str, str), optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.tile"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerpart","text":"Read part of multiple bands. Parameters bbox (float, float, float, float) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (Union(sequence of str, str), optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.part"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerpreview","text":"Return a preview from multiple bands. Parameters bands (Union(sequence of str, str), optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 pan (bool, optional) \u2014 method","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.preview"},{"location":"API/landsat/#rio_tiler_pdslandsatawslandsat8l8readerfeature","text":"Read multiple bands for a GeoJSON feature. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (Union(sequence of str, str), optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 pan (bool, optional) \u2014","title":"rio_tiler_pds.landsat.aws.landsat8.L8Reader.feature"},{"location":"API/landsat/#utils","text":"function","title":"Utils"},{"location":"API/landsat/#rio_tiler_pdslandsatutilssceneid_parser","text":"Parse Landsat id. Author @perrygeo - www.perrygeo.com Parameters sceneid (str) \u2014 Landsat sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidLandsatSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'LC08_L1TP_016037_20170813_20170814_01_RT' )","title":"rio_tiler_pds.landsat.utils.sceneid_parser"},{"location":"API/modis/","text":"MODIS PDS \u00b6 class rio_tiler_pds.modis.aws.modis_pds. MODISReader ( input , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , minzoom=4 , maxzoom=9 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset MODIS reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 reader_options (dict, optional) \u2014 reader (type of COGReader, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset Max Zoom level. Not in init . minzoom (int) \u2014 Dataset Min Zoom level. Not in init . reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with MODISReader ( 'MCD43A4.A2017006.h21v11.006.2017018074804' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Parse Sceneid and get grid bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Parse Sceneid and get grid bounds. MODIS ASTRAEA \u00b6 class rio_tiler_pds.modis.aws.modis_astraea. MODISReader ( input , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , minzoom=4 , maxzoom=9 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset MODIS reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 reader_options (dict, optional) \u2014 reader (type of COGReader, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset Max Zoom level. Not in init . minzoom (int) \u2014 Dataset Min Zoom level. Not in init . reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with MODISReader ( 'MCD43A4.A2017006.h21v11.006.2017018074804' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Parse Sceneid and get grid bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Parse Sceneid and get grid bounds. Utils \u00b6 function rio_tiler_pds.modis.utils. sceneid_parser ( sceneid ) Parse MODIS scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidMODISSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'MCD43A4.A2017006.h21v11.006.2017018074804' )","title":"MODIS"},{"location":"API/modis/#modis-pds","text":"class","title":"MODIS PDS"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_pdsmodisreader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset MODIS reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 reader_options (dict, optional) \u2014 reader (type of COGReader, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset Max Zoom level. Not in init . minzoom (int) \u2014 Dataset Min Zoom level. Not in init . reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with MODISReader ( 'MCD43A4.A2017006.h21v11.006.2017018074804' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Parse Sceneid and get grid bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method","title":"rio_tiler_pds.modis.aws.modis_pds.MODISReader"},{"location":"API/modis/#rio_tileriobasespatialmixintile_exists","text":"Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method","title":"rio_tiler.io.base.SpatialMixin.tile_exists"},{"location":"API/modis/#rio_tileriobasemultibandreaderenter","text":"Support using with Context Managers. method","title":"rio_tiler.io.base.MultiBandReader.enter"},{"location":"API/modis/#rio_tileriobasemultibandreaderexit","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler.io.base.MultiBandReader.exit"},{"location":"API/modis/#rio_tileriobasemultibandreaderparse_expression","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/modis/#rio_tileriobasemultibandreaderinfo","text":"Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/modis/#rio_tileriobasemultibandreaderstatistics","text":"Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method","title":"rio_tiler.io.base.MultiBandReader.statistics"},{"location":"API/modis/#rio_tileriobasemultibandreadertile","text":"Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.tile"},{"location":"API/modis/#rio_tileriobasemultibandreaderpart","text":"Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.part"},{"location":"API/modis/#rio_tileriobasemultibandreaderpreview","text":"Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.preview"},{"location":"API/modis/#rio_tileriobasemultibandreaderpoint","text":"Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method","title":"rio_tiler.io.base.MultiBandReader.point"},{"location":"API/modis/#rio_tileriobasemultibandreaderfeature","text":"Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.feature"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_pdsmodisreaderattrs_post_init","text":"Parse Sceneid and get grid bounds.","title":"rio_tiler_pds.modis.aws.modis_pds.MODISReader.attrs_post_init"},{"location":"API/modis/#modis-astraea","text":"class","title":"MODIS ASTRAEA"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_astraeamodisreader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset MODIS reader. Parameters tms (TileMatrixSet, optional) \u2014 input (str) \u2014 reader_options (dict, optional) \u2014 reader (type of COGReader, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is defined for each sensor). bounds (tuple) \u2014 Dataset bounds (left, bottom, right, top). Not in init . crs (rasterio.crs.CRS) \u2014 Dataset crs. Not in init . geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. geographic_crs (rasterio.crs.CRS) \u2014 CRS to use as geographic coordinate system. Defaults to WGS84. Not in init . input (any) \u2014 input data. maxzoom (int) \u2014 Dataset Max Zoom level. Not in init . minzoom (int) \u2014 Dataset Min Zoom level. Not in init . reader (rio_tiler.io.BaseReader) \u2014 reader. Not in init . reader_options (dict, option) \u2014 options to forward to the reader. Defaults to {} . scene_params (dict) \u2014 scene id parameters. tms (morecantile.TileMatrixSet, optional) \u2014 TileMatrixSet grid definition. Defaults to WebMercatorQuad . Examples >>> with MODISReader ( 'MCD43A4.A2017006.h21v11.006.2017018074804' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Parse Sceneid and get grid bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method","title":"rio_tiler_pds.modis.aws.modis_astraea.MODISReader"},{"location":"API/modis/#rio_tileriobasespatialmixintile_exists_1","text":"Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method","title":"rio_tiler.io.base.SpatialMixin.tile_exists"},{"location":"API/modis/#rio_tileriobasemultibandreaderenter_1","text":"Support using with Context Managers. method","title":"rio_tiler.io.base.MultiBandReader.enter"},{"location":"API/modis/#rio_tileriobasemultibandreaderexit_1","text":"Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method","title":"rio_tiler.io.base.MultiBandReader.exit"},{"location":"API/modis/#rio_tileriobasemultibandreaderparse_expression_1","text":"Parse rio-tiler band math expression. Parameters expression (str) \u2014 method","title":"rio_tiler.io.base.MultiBandReader.parse_expression"},{"location":"API/modis/#rio_tileriobasemultibandreaderinfo_1","text":"Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method","title":"rio_tiler.io.base.MultiBandReader.info"},{"location":"API/modis/#rio_tileriobasemultibandreaderstatistics_1","text":"Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method","title":"rio_tiler.io.base.MultiBandReader.statistics"},{"location":"API/modis/#rio_tileriobasemultibandreadertile_1","text":"Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.tile"},{"location":"API/modis/#rio_tileriobasemultibandreaderpart_1","text":"Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.part"},{"location":"API/modis/#rio_tileriobasemultibandreaderpreview_1","text":"Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.preview"},{"location":"API/modis/#rio_tileriobasemultibandreaderpoint_1","text":"Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (list) Pixel value per bands. method","title":"rio_tiler.io.base.MultiBandReader.point"},{"location":"API/modis/#rio_tileriobasemultibandreaderfeature_1","text":"Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method","title":"rio_tiler.io.base.MultiBandReader.feature"},{"location":"API/modis/#rio_tiler_pdsmodisawsmodis_astraeamodisreaderattrs_post_init","text":"Parse Sceneid and get grid bounds.","title":"rio_tiler_pds.modis.aws.modis_astraea.MODISReader.attrs_post_init"},{"location":"API/modis/#utils","text":"function","title":"Utils"},{"location":"API/modis/#rio_tiler_pdsmodisutilssceneid_parser","text":"Parse MODIS scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidMODISSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> sceneid_parser ( 'MCD43A4.A2017006.h21v11.006.2017018074804' )","title":"rio_tiler_pds.modis.utils.sceneid_parser"},{"location":"API/sentinel/","text":"Readers \u00b6 module rio_tiler_pds.sentinel.aws. sentinel1 AWS Sentinel 1 reader. Classes S1L1CReader \u2014 AWS Public Dataset Sentinel 1 reader. class rio_tiler_pds.sentinel.aws.sentinel1. S1L1CReader ( input , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> , reader=<class 'rio_tiler.io.cogeo.GCPCOGReader'> , reader_options={'nodata': 0} , minzoom=8 , maxzoom=14 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Sentinel 1 reader. Parameters input (str) \u2014 Sentinel-1 sceneid. tms (TileMatrixSet, optional) \u2014 reader (type of GCPCOGReader, optional) \u2014 reader_options (dict, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('vv', 'vh')). bounds \u2014 crs \u2014 datageom (dict) \u2014 sentinel 1 data geometry. geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). productInfo (dict) \u2014 sentinel 1 productInfo.json content. scene_params \u2014 Examples >>> with S1L1CReader ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.preview method. Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.tile method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the 'self.reader.part' method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.preview method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.point method. Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.feature method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch productInfo and get bounds. module rio_tiler_pds.sentinel.aws. sentinel2 AWS Sentinel 2 readers. Attributes SENTINEL_L2_BANDS \u2014 SENTINEL_L2_PRODUCTS \u2014 default_l1c_bands \u2014 default_l2a_bands \u2014 Classes S2L1CReader \u2014 AWS Public Dataset Sentinel 2 L1C reader. S2L2AReader \u2014 AWS Public Dataset Sentinel 2 L2A reader. S2L2ACOGReader \u2014 AWS Public Dataset Sentinel 2 L2A COGS reader. Functions S2COGReader ( sceneid , **kwargs ) (S2L2ACOGReader) \u2014 Sentinel-2 COG readers. S2JP2Reader ( sceneid , **kwargs ) (S2L2AReader or S2L1CReader) \u2014 Sentinel-2 JPEG2000 readers. class rio_tiler_pds.sentinel.aws.sentinel2. S2L1CReader ( input , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options={'nodata': 0} , minzoom=8 , maxzoom=14 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Sentinel 2 L1C reader. Parameters input (str) \u2014 Sentinel-2 L1C sceneid. tms (TileMatrixSet, optional) \u2014 reader (type of COGReader, optional) \u2014 reader_options (dict, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). bounds \u2014 crs \u2014 datageom (dict) \u2014 sentinel 2 data geometry. geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. tileInfo (dict) \u2014 sentinel 2 tileInfo.json content. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.preview method. Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.tile method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the 'self.reader.part' method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.preview method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.point method. Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.feature method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch productInfo and get bounds. class rio_tiler_pds.sentinel.aws.sentinel2. S2L2AReader ( input , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options={'nodata': 0} , minzoom=8 , maxzoom=14 ) Bases rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Sentinel 2 L2A reader. Parameters input (str) \u2014 Sentinel-2 L2A sceneid. tms (TileMatrixSet, optional) \u2014 reader (type of COGReader, optional) \u2014 reader_options (dict, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.preview method. Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.tile method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the 'self.reader.part' method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.preview method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.point method. Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.feature method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch productInfo and get bounds. class rio_tiler_pds.sentinel.aws.sentinel2. S2L2ACOGReader ( input , tms=<TileMatrixSet title='Google Maps Compatible for the World' identifier='WebMercatorQuad'> , reader=<class 'rio_tiler.io.cogeo.COGReader'> , reader_options=NOTHING , minzoom=8 , maxzoom=14 ) Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Sentinel 2 L2A COGS reader. Parameters input (str) \u2014 Sentinel-2 sceneid. tms (TileMatrixSet, optional) \u2014 reader (type of COGReader, optional) \u2014 reader_options (dict, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (defined by the STAC item.json). bounds \u2014 crs \u2014 geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. stac_item (dict) \u2014 sentinel 2 COG STAC item content. Examples >>> with S2L2ACOGReader ( 'S2A_29RKH_20200219_0_L2A' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch item.json and get bounds and bands. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.preview method. Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.tile method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the 'self.reader.part' method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.preview method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.point method. Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.feature method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch item.json and get bounds and bands. function rio_tiler_pds.sentinel.aws.sentinel2. S2COGReader ( sceneid , **kwargs ) \u2192 S2L2ACOGReader Sentinel-2 COG readers. Parameters sceneid (str) \u2014 **kwargs (any) \u2014 function rio_tiler_pds.sentinel.aws.sentinel2. S2JP2Reader ( sceneid , **kwargs ) \u2192 S2L2AReader or S2L1CReader Sentinel-2 JPEG2000 readers. Parameters sceneid (str) \u2014 **kwargs (any) \u2014 Utils \u00b6 function rio_tiler_pds.sentinel.utils. s2_sceneid_parser ( sceneid ) Parse Sentinel 2 scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s2_sceneid_parser ( 'S2A_L1C_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_L2A_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_29RKH_20200219_0_L2A' ) >>> s2_sceneid_parse ( 'S2B_MSIL2A_20190730T190919_N0212_R056_T10UEU_20201005T200819' ) function rio_tiler_pds.sentinel.utils. s1_sceneid_parser ( sceneid ) Parse Sentinel 1 scene id. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s1_sceneid_parser ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' )","title":"Sentinel"},{"location":"API/sentinel/#readers","text":"module","title":"Readers"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1","text":"AWS Sentinel 1 reader. Classes S1L1CReader \u2014 AWS Public Dataset Sentinel 1 reader. class","title":"rio_tiler_pds.sentinel.aws.sentinel1"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel1s1l1creader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Sentinel 1 reader. Parameters input (str) \u2014 Sentinel-1 sceneid. tms (TileMatrixSet, optional) \u2014 reader (type of GCPCOGReader, optional) \u2014 reader_options (dict, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('vv', 'vh')). bounds \u2014 crs \u2014 datageom (dict) \u2014 sentinel 1 data geometry. geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). productInfo (dict) \u2014 sentinel 1 productInfo.json content. scene_params \u2014 Examples >>> with S1L1CReader ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.preview method. Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.tile method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the 'self.reader.part' method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.preview method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.point method. Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.feature method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch productInfo and get bounds. module","title":"rio_tiler_pds.sentinel.aws.sentinel1.S1L1CReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2","text":"AWS Sentinel 2 readers. Attributes SENTINEL_L2_BANDS \u2014 SENTINEL_L2_PRODUCTS \u2014 default_l1c_bands \u2014 default_l2a_bands \u2014 Classes S2L1CReader \u2014 AWS Public Dataset Sentinel 2 L1C reader. S2L2AReader \u2014 AWS Public Dataset Sentinel 2 L2A reader. S2L2ACOGReader \u2014 AWS Public Dataset Sentinel 2 L2A COGS reader. Functions S2COGReader ( sceneid , **kwargs ) (S2L2ACOGReader) \u2014 Sentinel-2 COG readers. S2JP2Reader ( sceneid , **kwargs ) (S2L2AReader or S2L1CReader) \u2014 Sentinel-2 JPEG2000 readers. class","title":"rio_tiler_pds.sentinel.aws.sentinel2"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l1creader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Sentinel 2 L1C reader. Parameters input (str) \u2014 Sentinel-2 L1C sceneid. tms (TileMatrixSet, optional) \u2014 reader (type of COGReader, optional) \u2014 reader_options (dict, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). bounds \u2014 crs \u2014 datageom (dict) \u2014 sentinel 2 data geometry. geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. tileInfo (dict) \u2014 sentinel 2 tileInfo.json content. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.preview method. Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.tile method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the 'self.reader.part' method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.preview method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.point method. Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.feature method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch productInfo and get bounds. class","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l2areader","text":"Bases rio_tiler_pds.sentinel.aws.sentinel2.S2L1CReader rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Sentinel 2 L2A reader. Parameters input (str) \u2014 Sentinel-2 L2A sceneid. tms (TileMatrixSet, optional) \u2014 reader (type of COGReader, optional) \u2014 reader_options (dict, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (default is ('B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A')). geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. Examples >>> with S2L1CReader ( 'S2A_L1C_20170729_19UDP_0' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch productInfo and get bounds. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.preview method. Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.tile method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the 'self.reader.part' method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.preview method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.point method. Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.feature method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch productInfo and get bounds. class","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2L2AReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2l2acogreader","text":"Bases rio_tiler.io.base.MultiBandReader rio_tiler.io.base.SpatialMixin AWS Public Dataset Sentinel 2 L2A COGS reader. Parameters input (str) \u2014 Sentinel-2 sceneid. tms (TileMatrixSet, optional) \u2014 reader (type of COGReader, optional) \u2014 reader_options (dict, optional) \u2014 minzoom (int, optional) \u2014 maxzoom (int, optional) \u2014 Attributes bands (tuple) \u2014 list of available bands (defined by the STAC item.json). bounds \u2014 crs \u2014 geographic_bounds (float, float, float, float) \u2014 return bounds in WGS84. maxzoom (int) \u2014 Dataset's Max Zoom level (default is 14). minzoom (int) \u2014 Dataset's Min Zoom level (default is 8). scene_params (dict) \u2014 scene id parameters. stac_item (dict) \u2014 sentinel 2 COG STAC item content. Examples >>> with S2L2ACOGReader ( 'S2A_29RKH_20200219_0_L2A' ) as scene : print ( scene . bounds ) Methods __attrs_post_init__ ( ) \u2014 Fetch item.json and get bounds and bands. __enter__ ( ) \u2014 Support using with Context Managers. __exit__ ( exc_type , exc_value , traceback ) \u2014 Support using with Context Managers. feature ( shape , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts defined by geojson feature from multiple bands. info ( bands , *args , **kwargs ) (dict) \u2014 Return metadata from multiple bands. parse_expression ( expression ) (tuple) \u2014 Parse rio-tiler band math expression. part ( bbox , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge parts from multiple bands. point ( lon , lat , bands , expression , **kwargs ) (list) \u2014 Read a pixel values from multiple bands. preview ( bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge previews from multiple bands. statistics ( bands , expression , categorical , categories , percentiles , hist_options , max_size , **kwargs ) (dict) \u2014 Return array statistics for multiple assets. tile ( tile_x , tile_y , tile_z , bands , expression , **kwargs ) (rio_tiler.models.ImageData) \u2014 Read and merge Web Map tiles multiple bands. tile_exists ( tile_x , tile_y , tile_z ) (bool) \u2014 Check if a tile intersects the dataset bounds. method tile_exists ( tile_x , tile_y , tile_z ) Check if a tile intersects the dataset bounds. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. Returns (bool) True if the tile intersects the dataset bounds. method __enter__ ( ) Support using with Context Managers. method __exit__ ( exc_type , exc_value , traceback ) Support using with Context Managers. Parameters exc_type \u2014 exc_value \u2014 traceback \u2014 method parse_expression ( expression ) \u2192 tuple Parse rio-tiler band math expression. Parameters expression (str) \u2014 method info ( bands=None , *args , **kwargs ) Return metadata from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 band names to fetch info from. Required keyword argument. *args \u2014 **kwargs (any) \u2014 Returns (dict) Multiple bands info in form of {\"band1\": rio_tile.models.Info}. method statistics ( bands=None , expression=None , categorical=False , categories=None , percentiles=[2, 98] , hist_options=None , max_size=1024 , **kwargs ) Return array statistics for multiple assets. Parameters bands (sequence of str or str) \u2014 bands to fetch info from. Required keyword argument. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). categorical (bool) \u2014 treat input data as categorical data. Defaults to False. categories (list of numbers, optional) \u2014 list of categories to return value for. percentiles (list of numbers, optional) \u2014 list of percentile values to calculate. Defaults to [2, 98] . hist_options (dict, optional) \u2014 Options to forward to numpy.histogram function. max_size (int, optional) \u2014 Limit the size of the longest dimension of the dataset read, respecting bounds X/Y aspect ratio. Defaults to 1024. **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.preview method. Returns (dict) Multiple assets statistics in form of {\"{band}/{expression}\": rio_tiler.models.BandStatistics, ...}. method tile ( tile_x , tile_y , tile_z , bands=None , expression=None , **kwargs ) Read and merge Web Map tiles multiple bands. Parameters tile_x (int) \u2014 Tile's horizontal index. tile_y (int) \u2014 Tile's vertical index. tile_z (int) \u2014 Tile's zoom level index. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.tile method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method part ( bbox , bands=None , expression=None , **kwargs ) Read and merge parts from multiple bands. Parameters bbox (tuple) \u2014 Output bounds (left, bottom, right, top) in target crs. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the 'self.reader.part' method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method preview ( bands=None , expression=None , **kwargs ) Read and merge previews from multiple bands. Parameters bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.preview method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method point ( lon , lat , bands=None , expression=None , **kwargs ) Read a pixel values from multiple bands. Parameters lon (float) \u2014 Longitude. lat (float) \u2014 Latitude. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.point method. Returns (list) Pixel value per bands. method feature ( shape , bands=None , expression=None , **kwargs ) Read and merge parts defined by geojson feature from multiple bands. Parameters shape (dict) \u2014 Valid GeoJSON feature. bands (sequence of str or str, optional) \u2014 bands to fetch info from. expression (str, optional) \u2014 rio-tiler expression for the band list (e.g. b1/b2+b3). **kwargs (any) \u2014 kwargs (optional) \u2014 Options to forward to the self.reader.feature method. Returns (rio_tiler.models.ImageData) ImageData instance with data, mask and tile spatial info. method __attrs_post_init__ ( ) Fetch item.json and get bounds and bands. function","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2L2ACOGReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2cogreader","text":"Sentinel-2 COG readers. Parameters sceneid (str) \u2014 **kwargs (any) \u2014 function","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2COGReader"},{"location":"API/sentinel/#rio_tiler_pdssentinelawssentinel2s2jp2reader","text":"Sentinel-2 JPEG2000 readers. Parameters sceneid (str) \u2014 **kwargs (any) \u2014","title":"rio_tiler_pds.sentinel.aws.sentinel2.S2JP2Reader"},{"location":"API/sentinel/#utils","text":"function","title":"Utils"},{"location":"API/sentinel/#rio_tiler_pdssentinelutilss2_sceneid_parser","text":"Parse Sentinel 2 scene id. Parameters sceneid (str) \u2014 Sentinel-2 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s2_sceneid_parser ( 'S2A_L1C_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_L2A_20170729_19UDP_0' ) >>> s2_sceneid_parser ( 'S2A_29RKH_20200219_0_L2A' ) >>> s2_sceneid_parse ( 'S2B_MSIL2A_20190730T190919_N0212_R056_T10UEU_20201005T200819' ) function","title":"rio_tiler_pds.sentinel.utils.s2_sceneid_parser"},{"location":"API/sentinel/#rio_tiler_pdssentinelutilss1_sceneid_parser","text":"Parse Sentinel 1 scene id. Parameters sceneid (str) \u2014 Sentinel-1 sceneid. Returns (dict) dictionary with metadata constructed from the sceneid. Raises InvalidSentinelSceneId \u2014 If sceneid doesn't match the regex schema. Examples >>> s1_sceneid_parser ( 'S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B' )","title":"rio_tiler_pds.sentinel.utils.s1_sceneid_parser"},{"location":"usage/cbers/","text":"CBERS 4 - AWS \u00b6 Since data are requester pays, we need to set an environment variable to access the data through rasterio . AWS_REQUEST_PAYER = \"requester\" You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.cbers.aws import CBERSReader CBERS_MUX_SCENE = \"CBERS_4_MUX_20171121_057_094_L2\" CBERS_AWFI_SCENE = \"CBERS_4_AWFI_20170420_146_129_L2\" CBERS_PAN10M_SCENE = \"CBERS_4_PAN10M_20170427_161_109_L4\" CBERS_PAN5M_SCENE = \"CBERS_4_PAN5M_20170425_153_114_L4\" with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with CBERSReader ( \"CBERS_4_MUX_20171121_057_094_L2\" ) as cbers : print ( cbers . bands ) >>> ( 'B5' , 'B6' , 'B7' , 'B8' ) print ( cbers . bounds ) >>> ( 90480.0 , 526840.0 , 236940.0 , 666560.0 ) print ( cbers . geographic_bounds ) >>> ( 53.3020208330578 , 4.756472757234312 , 54.628483877373014 , 6.025171883475984 ) assert cbers . minzoom == 8 assert cbers . maxzoom == 12 with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with CBERSReader ( \"CBERS_4_AWFI_20170420_146_129_L2\" ) as cbers : print ( cbers . bands ) >>> ( 'B13' , 'B14' , 'B15' , 'B16' ) with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with CBERSReader ( \"CBERS_4_PAN10M_20170427_161_109_L4\" ) as cbers : print ( cbers . bands ) >>> ( 'B2' , 'B3' , 'B4' ) with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with CBERSReader ( \"CBERS_4_PAN5M_20170425_153_114_L4\" ) as cbers : print ( cbers . bands ) >>> ( 'B1' ,)","title":"CBERS"},{"location":"usage/cbers/#cbers-4-aws","text":"Since data are requester pays, we need to set an environment variable to access the data through rasterio . AWS_REQUEST_PAYER = \"requester\" You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.cbers.aws import CBERSReader CBERS_MUX_SCENE = \"CBERS_4_MUX_20171121_057_094_L2\" CBERS_AWFI_SCENE = \"CBERS_4_AWFI_20170420_146_129_L2\" CBERS_PAN10M_SCENE = \"CBERS_4_PAN10M_20170427_161_109_L4\" CBERS_PAN5M_SCENE = \"CBERS_4_PAN5M_20170425_153_114_L4\" with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with CBERSReader ( \"CBERS_4_MUX_20171121_057_094_L2\" ) as cbers : print ( cbers . bands ) >>> ( 'B5' , 'B6' , 'B7' , 'B8' ) print ( cbers . bounds ) >>> ( 90480.0 , 526840.0 , 236940.0 , 666560.0 ) print ( cbers . geographic_bounds ) >>> ( 53.3020208330578 , 4.756472757234312 , 54.628483877373014 , 6.025171883475984 ) assert cbers . minzoom == 8 assert cbers . maxzoom == 12 with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with CBERSReader ( \"CBERS_4_AWFI_20170420_146_129_L2\" ) as cbers : print ( cbers . bands ) >>> ( 'B13' , 'B14' , 'B15' , 'B16' ) with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with CBERSReader ( \"CBERS_4_PAN10M_20170427_161_109_L4\" ) as cbers : print ( cbers . bands ) >>> ( 'B2' , 'B3' , 'B4' ) with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with CBERSReader ( \"CBERS_4_PAN5M_20170425_153_114_L4\" ) as cbers : print ( cbers . bands ) >>> ( 'B1' ,)","title":"CBERS 4 - AWS"},{"location":"usage/landsat-c2/","text":"Landsat Collection 2 - AWS \u00b6 In late 2020, the U.S. Geological Survey (USGS) \u2014 the organization that publishes Landsat data \u2014 released Landsat Collection 2. This is a major reprocessing of the entire Landsat archive. All Landsat data in Collection 2 is now stored as Cloud-Optimized GeoTIFF (COG)! Landsat Collection 2 can be accessed directly from an AWS bucket. The USGS maintains the usgs-landsat S3 bucket. Keys under the s3://usgs-landsat/collection02/ prefix are publicly accessible. Note that this bucket is a requester-pays bucket, which means that the costs of accessing the data accrue to the user , not the host . Since data are requester pays, we need to set an environment variable to access the data through rasterio . AWS_REQUEST_PAYER = \"requester\" You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.landsat.aws import LandsatC2Reader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with LandsatC2Reader ( \"LC08_L2SR_093106_20200207_20201016_02_T2\" ) as landsat : print ( landsat . bands ) >>> ( 'QA_PIXEL' , 'QA_RADSAT' , 'SR_B1' , 'SR_B2' , 'SR_B3' , 'SR_B4' , 'SR_B5' , 'SR_B6' , 'SR_B7' , 'SR_QA_AEROSOL' ) assert landsat . minzoom == 5 assert landsat . maxzoom == 12 print ( landsat . info ( bands = \"SR_B1\" ) . json ( exclude_none = True )) >>> { \"bounds\" : [ 127.54909041630796 , - 66.70705179185323 , 132.96277753047164 , - 64.4554629843337 ], \"minzoom\" : 5 , \"maxzoom\" : 12 , \"band_metadata\" : [[ \"SR_B1\" , {}]], \"band_descriptions\" : [[ \"SR_B1\" , \"\" ]], \"dtype\" : \"uint16\" , \"nodata_type\" : \"Nodata\" , \"colorinterp\" : [ \"gray\" ] } print ( landsat . statistics ( bands = \"SR_B1\" )[ \"SR_B1\" ] . json ()) >>> { \"min\" : 2487.0 , \"max\" : 53345.0 , \"mean\" : 21039.126798561152 , \"count\" : 8896.0 , \"sum\" : 187164072.0 , \"std\" : 16484.450981447077 , \"median\" : 10978.0 , \"majority\" : 8233.0 , \"minority\" : 2487.0 , \"unique\" : 5932.0 , \"histogram\" : [ [ 594.0 , 4181.0 , 603.0 , 557.0 , 296.0 , 207.0 , 296.0 , 469.0 , 615.0 , 1078.0 ], [ 2487.0 , 7572.8 , 12658.6 , 17744.4 , 22830.2 , 27916.0 , 33001.8 , 38087.6 , 43173.4 , 48259.200000000004 , 53345.0 ] ], \"valid_percent\" : 54.3 , \"masked_pixels\" : 7488.0 , \"valid_pixels\" : 8896.0 , \"percentile_98\" : 52178.1 , \"percentile_2\" : 7367.9 } tile_z = 8 tile_x = 218 tile_y = 188 img = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"SR_B4\" , \"SR_B3\" , \"SR_B2\" )) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , bands = \"SR_B5\" ) assert img . data . shape == ( 1 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , expression = \"SR_B5*0.8, SR_B4*1.1, SR_B3*0.8\" ) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . preview ( bands = ( \"SR_B4\" , \"SR_B3\" , \"SR_B2\" ), pan = True , width = 256 , height = 256 ) assert img . data . shape == ( 3 , 256 , 256 )","title":"Landsat Collection 2"},{"location":"usage/landsat-c2/#landsat-collection-2-aws","text":"In late 2020, the U.S. Geological Survey (USGS) \u2014 the organization that publishes Landsat data \u2014 released Landsat Collection 2. This is a major reprocessing of the entire Landsat archive. All Landsat data in Collection 2 is now stored as Cloud-Optimized GeoTIFF (COG)! Landsat Collection 2 can be accessed directly from an AWS bucket. The USGS maintains the usgs-landsat S3 bucket. Keys under the s3://usgs-landsat/collection02/ prefix are publicly accessible. Note that this bucket is a requester-pays bucket, which means that the costs of accessing the data accrue to the user , not the host . Since data are requester pays, we need to set an environment variable to access the data through rasterio . AWS_REQUEST_PAYER = \"requester\" You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.landsat.aws import LandsatC2Reader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with LandsatC2Reader ( \"LC08_L2SR_093106_20200207_20201016_02_T2\" ) as landsat : print ( landsat . bands ) >>> ( 'QA_PIXEL' , 'QA_RADSAT' , 'SR_B1' , 'SR_B2' , 'SR_B3' , 'SR_B4' , 'SR_B5' , 'SR_B6' , 'SR_B7' , 'SR_QA_AEROSOL' ) assert landsat . minzoom == 5 assert landsat . maxzoom == 12 print ( landsat . info ( bands = \"SR_B1\" ) . json ( exclude_none = True )) >>> { \"bounds\" : [ 127.54909041630796 , - 66.70705179185323 , 132.96277753047164 , - 64.4554629843337 ], \"minzoom\" : 5 , \"maxzoom\" : 12 , \"band_metadata\" : [[ \"SR_B1\" , {}]], \"band_descriptions\" : [[ \"SR_B1\" , \"\" ]], \"dtype\" : \"uint16\" , \"nodata_type\" : \"Nodata\" , \"colorinterp\" : [ \"gray\" ] } print ( landsat . statistics ( bands = \"SR_B1\" )[ \"SR_B1\" ] . json ()) >>> { \"min\" : 2487.0 , \"max\" : 53345.0 , \"mean\" : 21039.126798561152 , \"count\" : 8896.0 , \"sum\" : 187164072.0 , \"std\" : 16484.450981447077 , \"median\" : 10978.0 , \"majority\" : 8233.0 , \"minority\" : 2487.0 , \"unique\" : 5932.0 , \"histogram\" : [ [ 594.0 , 4181.0 , 603.0 , 557.0 , 296.0 , 207.0 , 296.0 , 469.0 , 615.0 , 1078.0 ], [ 2487.0 , 7572.8 , 12658.6 , 17744.4 , 22830.2 , 27916.0 , 33001.8 , 38087.6 , 43173.4 , 48259.200000000004 , 53345.0 ] ], \"valid_percent\" : 54.3 , \"masked_pixels\" : 7488.0 , \"valid_pixels\" : 8896.0 , \"percentile_98\" : 52178.1 , \"percentile_2\" : 7367.9 } tile_z = 8 tile_x = 218 tile_y = 188 img = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"SR_B4\" , \"SR_B3\" , \"SR_B2\" )) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , bands = \"SR_B5\" ) assert img . data . shape == ( 1 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , expression = \"SR_B5*0.8, SR_B4*1.1, SR_B3*0.8\" ) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . preview ( bands = ( \"SR_B4\" , \"SR_B3\" , \"SR_B2\" ), pan = True , width = 256 , height = 256 ) assert img . data . shape == ( 3 , 256 , 256 )","title":"Landsat Collection 2 - AWS"},{"location":"usage/landsat/","text":"Landsat 8 - AWS \u00b6 Landsat 8 dataset hosted on AWS are not a proper Cloud Optimized GeoTIFF because they have external overviews. To make sure the performance is good enough and limit the number of LIST/GET requests from GDAL/Rasterio, we can set some environment variables: # https://trac.osgeo.org/gdal/wiki/ConfigOptions#CPL_VSIL_CURL_ALLOWED_EXTENSIONS CPL_VSIL_CURL_ALLOWED_EXTENSIONS = .TIF,.ovr # https://trac.osgeo.org/gdal/wiki/ConfigOptions#GDAL_DISABLE_READDIR_ON_OPEN GDAL_DISABLE_READDIR_ON_OPEN = FALSE You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.landsat.aws import L8Reader with rasterio . Env ( CPL_VSIL_CURL_ALLOWED_EXTENSIONS = \".TIF,.ovr\" , GDAL_DISABLE_READDIR_ON_OPEN = \"FALSE\" , ): with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . bands ) >>> ( 'B1' , 'B2' , 'B3' , 'B4' , 'B5' , 'B6' , 'B7' , 'B8' , 'B9' , 'B10' , 'B11' , 'BQA' assert landsat . minzoom == 7 assert landsat . maxzoom == 12 print ( landsat . info ( bands = \"B1\" ) . json ( exclude_none = True )) >>> { \"bounds\" : [ - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ], \"minzoom\" : 7 , \"maxzoom\" : 12 , \"band_metadata\" : [[ \"B1\" , {}]], \"band_descriptions\" : [[ \"B1\" , \"\" ]], \"dtype\" : \"uint16\" , \"nodata_type\" : \"Nodata\" , \"colorinterp\" : [ \"gray\" ] } print ( landsat . statistics ( bands = \"B1\" )[ \"B1\" ] . json ()) >>> { \"min\" : 0.0 , \"max\" : 11930.0 , \"mean\" : 2033.7163353188776 , \"count\" : 721045.0 , \"sum\" : 1466400995.0 , \"std\" : 1342.4201622910466 , \"median\" : 1491.0 , \"majority\" : 0.0 , \"minority\" : 11.0 , \"unique\" : 9363.0 , \"histogram\" : [ [ 9259.0 , 574137.0 , 60257.0 , 33983.0 , 20278.0 , 12212.0 , 7189.0 , 2999.0 , 641.0 , 90.0 ], [ 0.0 , 1193.0 , 2386.0 , 3579.0 , 4772.0 , 5965.0 , 7158.0 , 8351.0 , 9544.0 , 10737.0 , 11930.0 ] ], \"valid_percent\" : 69.99 , \"masked_pixels\" : 309099.0 , \"valid_pixels\" : 721045.0 , \"percentile_98\" : 6757.0 , \"percentile_2\" : 1212.0 } tile_z = 8 tile_x = 71 tile_y = 102 img = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" )) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , bands = \"B10\" ) assert img . data . shape == ( 1 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True ) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , expression = \"B5*0.8, B4*1.1, B3*0.8\" ) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . preview ( bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True , width = 256 , height = 256 ) assert img . data . shape == ( 3 , 256 , 256 )","title":"Landsat"},{"location":"usage/landsat/#landsat-8-aws","text":"Landsat 8 dataset hosted on AWS are not a proper Cloud Optimized GeoTIFF because they have external overviews. To make sure the performance is good enough and limit the number of LIST/GET requests from GDAL/Rasterio, we can set some environment variables: # https://trac.osgeo.org/gdal/wiki/ConfigOptions#CPL_VSIL_CURL_ALLOWED_EXTENSIONS CPL_VSIL_CURL_ALLOWED_EXTENSIONS = .TIF,.ovr # https://trac.osgeo.org/gdal/wiki/ConfigOptions#GDAL_DISABLE_READDIR_ON_OPEN GDAL_DISABLE_READDIR_ON_OPEN = FALSE You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.landsat.aws import L8Reader with rasterio . Env ( CPL_VSIL_CURL_ALLOWED_EXTENSIONS = \".TIF,.ovr\" , GDAL_DISABLE_READDIR_ON_OPEN = \"FALSE\" , ): with L8Reader ( \"LC08_L1TP_016037_20170813_20170814_01_RT\" ) as landsat : print ( landsat . bands ) >>> ( 'B1' , 'B2' , 'B3' , 'B4' , 'B5' , 'B6' , 'B7' , 'B8' , 'B9' , 'B10' , 'B11' , 'BQA' assert landsat . minzoom == 7 assert landsat . maxzoom == 12 print ( landsat . info ( bands = \"B1\" ) . json ( exclude_none = True )) >>> { \"bounds\" : [ - 81.30836 , 32.10539 , - 78.82045 , 34.22818 ], \"minzoom\" : 7 , \"maxzoom\" : 12 , \"band_metadata\" : [[ \"B1\" , {}]], \"band_descriptions\" : [[ \"B1\" , \"\" ]], \"dtype\" : \"uint16\" , \"nodata_type\" : \"Nodata\" , \"colorinterp\" : [ \"gray\" ] } print ( landsat . statistics ( bands = \"B1\" )[ \"B1\" ] . json ()) >>> { \"min\" : 0.0 , \"max\" : 11930.0 , \"mean\" : 2033.7163353188776 , \"count\" : 721045.0 , \"sum\" : 1466400995.0 , \"std\" : 1342.4201622910466 , \"median\" : 1491.0 , \"majority\" : 0.0 , \"minority\" : 11.0 , \"unique\" : 9363.0 , \"histogram\" : [ [ 9259.0 , 574137.0 , 60257.0 , 33983.0 , 20278.0 , 12212.0 , 7189.0 , 2999.0 , 641.0 , 90.0 ], [ 0.0 , 1193.0 , 2386.0 , 3579.0 , 4772.0 , 5965.0 , 7158.0 , 8351.0 , 9544.0 , 10737.0 , 11930.0 ] ], \"valid_percent\" : 69.99 , \"masked_pixels\" : 309099.0 , \"valid_pixels\" : 721045.0 , \"percentile_98\" : 6757.0 , \"percentile_2\" : 1212.0 } tile_z = 8 tile_x = 71 tile_y = 102 img = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" )) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , bands = \"B10\" ) assert img . data . shape == ( 1 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True ) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . tile ( tile_x , tile_y , tile_z , expression = \"B5*0.8, B4*1.1, B3*0.8\" ) assert img . data . shape == ( 3 , 256 , 256 ) img = landsat . preview ( bands = ( \"B4\" , \"B3\" , \"B2\" ), pan = True , width = 256 , height = 256 ) assert img . data . shape == ( 3 , 256 , 256 )","title":"Landsat 8 - AWS"},{"location":"usage/modis/","text":"MODIS - AWS \u00b6 PDS (modis-pds bucket) \u00b6 Products : MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA from rio_tiler_pds.modis.aws import MODISPDSReader MCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\" with MODISPDSReader ( MCD43A4_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B01qa\" , \"B02\" , \"B02qa\" , \"B03\" , \"B03qa\" , \"B04\" , \"B04qa\" , \"B05\" , \"B05qa\" , \"B06\" , \"B06qa\" , \"B07\" , \"B07qa\" ) print ( modis . bounds ) >>> ( 31.9253 , - 30.0 , 46.1976 , - 20.0 ) assert modis . minzoom == 4 assert modis . maxzoom == 9 MOD09GA_SCENE = \"MOD09GA.A2017129.h34v07.006.2017137214839\" with MODISPDSReader ( MOD09GA_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"geoflags\" , \"granule\" , \"numobs1km\" , \"numobs500m\" , \"obscov\" , \"obsnum\" , \"orbit\" , \"qc500m\" , \"qscan\" , \"range\" , \"senaz\" , \"senzen\" , \"solaz\" , \"solzen\" , \"state\" ) MOD09GQ_SCENE = \"MOD09GQ.A2017120.h29v09.006.2017122031126\" with MODISPDSReader ( MOD09GQ_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B02\" , \"granule\" , \"numobs\" , \"obscov\" , \"obsnum\" , \"orbit\" , \"qc\" ) ASTRAEA (astraea-opendata bucket) \u00b6 Products : MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 from rio_tiler_pds.modis.aws import MODISASTRAEAReader MCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\" with MODISASTRAEAReader ( MCD43A4_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B01qa\" , \"B02\" , \"B02qa\" , \"B03\" , \"B03qa\" , \"B04\" , \"B04qa\" , \"B05\" , \"B05qa\" , \"B06\" , \"B06qa\" , \"B07\" , \"B07qa\" ) print ( modis . bounds ) >>> ( 31.9253 , - 30.0 , 46.1976 , - 20.0 ) assert modis . minzoom == 4 assert modis . maxzoom == 9 MOD11A1_SCENE = \"MOD11A1.A2020250.h20v11.006.2020251085003\" with MODISASTRAEAReader ( MOD11A1_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B09\" , \"B10\" , \"B11\" , \"B12\" ) MOD13A1_SCENE = \"MOD13A1.A2020049.h14v04.006.2020066002045\" with MODISASTRAEAReader ( MOD13A1_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B09\" , \"B10\" , \"B11\" , \"B12\" )","title":"MODIS"},{"location":"usage/modis/#modis-aws","text":"","title":"MODIS - AWS"},{"location":"usage/modis/#pds-modis-pds-bucket","text":"Products : MCD43A4, MOD09GQ, MYD09GQ, MOD09GA, MYD09GA from rio_tiler_pds.modis.aws import MODISPDSReader MCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\" with MODISPDSReader ( MCD43A4_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B01qa\" , \"B02\" , \"B02qa\" , \"B03\" , \"B03qa\" , \"B04\" , \"B04qa\" , \"B05\" , \"B05qa\" , \"B06\" , \"B06qa\" , \"B07\" , \"B07qa\" ) print ( modis . bounds ) >>> ( 31.9253 , - 30.0 , 46.1976 , - 20.0 ) assert modis . minzoom == 4 assert modis . maxzoom == 9 MOD09GA_SCENE = \"MOD09GA.A2017129.h34v07.006.2017137214839\" with MODISPDSReader ( MOD09GA_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"geoflags\" , \"granule\" , \"numobs1km\" , \"numobs500m\" , \"obscov\" , \"obsnum\" , \"orbit\" , \"qc500m\" , \"qscan\" , \"range\" , \"senaz\" , \"senzen\" , \"solaz\" , \"solzen\" , \"state\" ) MOD09GQ_SCENE = \"MOD09GQ.A2017120.h29v09.006.2017122031126\" with MODISPDSReader ( MOD09GQ_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B02\" , \"granule\" , \"numobs\" , \"obscov\" , \"obsnum\" , \"orbit\" , \"qc\" )","title":"PDS (modis-pds bucket)"},{"location":"usage/modis/#astraea-astraea-opendata-bucket","text":"Products : MCD43A4, MOD11A1, MOD13A1, MYD11A1 MYD13A1 from rio_tiler_pds.modis.aws import MODISASTRAEAReader MCD43A4_SCENE = \"MCD43A4.A2017006.h21v11.006.2017018074804\" with MODISASTRAEAReader ( MCD43A4_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B01qa\" , \"B02\" , \"B02qa\" , \"B03\" , \"B03qa\" , \"B04\" , \"B04qa\" , \"B05\" , \"B05qa\" , \"B06\" , \"B06qa\" , \"B07\" , \"B07qa\" ) print ( modis . bounds ) >>> ( 31.9253 , - 30.0 , 46.1976 , - 20.0 ) assert modis . minzoom == 4 assert modis . maxzoom == 9 MOD11A1_SCENE = \"MOD11A1.A2020250.h20v11.006.2020251085003\" with MODISASTRAEAReader ( MOD11A1_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B09\" , \"B10\" , \"B11\" , \"B12\" ) MOD13A1_SCENE = \"MOD13A1.A2020049.h14v04.006.2020066002045\" with MODISASTRAEAReader ( MOD13A1_SCENE ) as modis : print ( modis . bands ) >>> ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B09\" , \"B10\" , \"B11\" , \"B12\" )","title":"ASTRAEA (astraea-opendata bucket)"},{"location":"usage/overview/","text":"Usage \u00b6 The neighboring documentation pages include more information about each specific dataset, plus an example. Requester-Pays \u00b6 Some data are stored on AWS requester-pays buckets (you are charged for LIST/GET requests and data transfer outside the bucket region). For those datasets you need to set AWS_REQUEST_PAYER=\"requester\" environement variable to tell AWS S3 that you agree with requester-pays principle. You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.sentinel.aws import S2JP2Reader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2JP2Reader ( \"S2A_L1C_20170729_19UDP_0\" ) as s2 : print ( s2 . preview ( bands = \"B01\" , width = 64 , height = 64 ))","title":"Overview"},{"location":"usage/overview/#usage","text":"The neighboring documentation pages include more information about each specific dataset, plus an example.","title":"Usage"},{"location":"usage/overview/#requester-pays","text":"Some data are stored on AWS requester-pays buckets (you are charged for LIST/GET requests and data transfer outside the bucket region). For those datasets you need to set AWS_REQUEST_PAYER=\"requester\" environement variable to tell AWS S3 that you agree with requester-pays principle. You can either set those variables in your environment or within your code using rasterio.Env() . import rasterio from rio_tiler_pds.sentinel.aws import S2JP2Reader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2JP2Reader ( \"S2A_L1C_20170729_19UDP_0\" ) as s2 : print ( s2 . preview ( bands = \"B01\" , width = 64 , height = 64 ))","title":"Requester-Pays"},{"location":"usage/sentinel/","text":"Sentinel 2 - AWS \u00b6 L1C - JPEG2000 \u00b6 Warnings JPEG2000 format is not Cloud Optimized , numerous GET requests will be needed to read such format which could result in important cost. bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A import rasterio from rio_tiler_pds.sentinel.aws import S2JP2Reader # We use __enter__ context manager for the Reader. # When creating the instance of `sentinel` the Reader will fetch the sentinel 2 TileInfo.json # to retrieve the bounds of the dataset and other metadata available at `sentinel.tileInfo`. with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2JP2Reader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L1CReader '> print ( type ( sentinel . tileInfo )) >>> < class ' dict '> print ( type ( sentinel . datageom )) >>> < class ' dict '> print ( sentinel . bands ) >>> ( 'B01' , 'B02' , 'B03' , 'B04' , 'B05' , 'B06' , 'B07' , 'B08' , 'B09' , 'B11' , 'B12' , 'B8A' ) print ( sentinel . info ( bands = \"B01\" ) . json ( exclude_none = True )) >>> { 'bounds' : [ - 69.98971880792764 , 47.761069480166995 , - 68.86723101847079 , 48.75300221903151 ], 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [[ \"B01\" , {}]], 'band_descriptions' : [[ \"B01\" , {}]], 'dtype' : 'uint16' , 'nodata_type' : 'Nodata' , 'colorinterp' : [ 'gray' ] } print ( sentinel . statistics ( bands = \"B8A\" )[ \"B8A\" ] . json ()) >>> { 'min' : 1.0 , 'max' : 19753.0 , 'mean' : 2873.8173758756675 , 'count' : 653216.0 , 'sum' : 1877223491.0 , 'std' : 2680.2546389126283 , 'median' : 2919.0 , 'majority' : 117.0 , 'minority' : 9913.0 , 'unique' : 11767.0 , 'histogram' : [ [ 281576.0 , 154185.0 , 130600.0 , 49758.0 , 30001.0 , 6851.0 , 242.0 , 1.0 , 1.0 , 1.0 ], [ 1.0 , 1976.2 , 3951.4 , 5926.6 , 7901.8 , 9877.0 , 11852.2 , 13827.4 , 15802.6 , 17777.8 , 19753.0 ] ], 'valid_percent' : 62.3 , 'masked_pixels' : 395360.0 , 'valid_pixels' : 653216.0 , 'percentile_98' : 9320.699999999953 , 'percentile_2' : 106.0 } img = sentinel . tile ( 77 , 89 , 8 , bands = \"B01\" ) assert img . data . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , bands = ( \"B01\" , \"B02\" ))) # Result is in form of # [ # value for band 1 in band B01, # value for band 1 in band B02 # ] > [ 1230 , 875 ] # Working with Expression img = sentinel . tile ( 77 , 89 , 8 , expression = \"B01/B02\" ) assert igm . data . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , expression = \"B01/B02\" )) > [ 1.424673784104389 ] L2A - JPEG2000 \u00b6 Warnings JPEG2000 format is not Cloud Optimized , numerous GET requests will be needed to read such format which could result in important cost. bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP bands are not supported. import rasterio from rio_tiler_pds.sentinel.aws import S2JP2Reader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2JP2Reader ( \"S2A_L2A_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L2AReader '> print ( type ( sentinel . tileInfo )) >>> dict print ( type ( sentinel . datageom )) >>> dict print ( sentinel . info ( bands = \"B01\" ) . dict ( exclude_none = True )) >>> { \"bounds\" : [ - 69.98831359398795 , 47.7610811323474 , - 68.86723101847079 , 48.75300225264652 ], \"minzoom\" : 8 , \"maxzoom\" : 14 , \"band_metadata\" : [[ \"B01\" , {}]], \"band_descriptions\" : [[ \"B01\" , \"\" ]], \"dtype\" : \"uint16\" , \"nodata_type\" : \"Nodata\" , \"colorinterp\" : [ \"gray\" ] } COG (Only L2A available for now) \u00b6 bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP STAC assets are not supported. Note: the B10 band is the cirrus band and is only supported for L1C, not L2A. from rio_tiler_pds.sentinel.aws import S2COGReader with S2COGReader ( \"S2A_29RKH_20200219_0_L2A\" ) as sentinel : print ( type ( sentinel )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L2ACOGReader '> print ( sentinel . bands ) >>> ( 'B01' , 'B02' , 'B03' , 'B04' , 'B05' , 'B06' , 'B07' , 'B08' , 'B09' , 'B11' , 'B12' , 'B8A' ) # bounds and metadata are derived from the STAC item stored with the COG print ( type ( sentinel . stac_item )) >>> dict Sentinel 1 - AWS \u00b6 import rasterio from rio_tiler_pds.sentinel.aws import S1L1CReader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S1L1CReader ( \"S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B\" ) as sentinel : print ( sentinel . bands ) > ( 'vv' , 'vh' ) print ( sentine . bounds ) > ( 75.605247 , 9.225784 , 78.203903 , 11.190425 ) print ( type ( sentinel . productInfo )) > dict print ( sentinel . _get_band_url ( \"vv\" )) > 's3://sentinel-s1-l1c/GRD/2018/7/16/IW/DV/S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B/measurement/iw-vv.tiff'","title":"Sentinel"},{"location":"usage/sentinel/#sentinel-2-aws","text":"","title":"Sentinel 2 - AWS"},{"location":"usage/sentinel/#l1c-jpeg2000","text":"Warnings JPEG2000 format is not Cloud Optimized , numerous GET requests will be needed to read such format which could result in important cost. bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A import rasterio from rio_tiler_pds.sentinel.aws import S2JP2Reader # We use __enter__ context manager for the Reader. # When creating the instance of `sentinel` the Reader will fetch the sentinel 2 TileInfo.json # to retrieve the bounds of the dataset and other metadata available at `sentinel.tileInfo`. with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2JP2Reader ( \"S2A_L1C_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L1CReader '> print ( type ( sentinel . tileInfo )) >>> < class ' dict '> print ( type ( sentinel . datageom )) >>> < class ' dict '> print ( sentinel . bands ) >>> ( 'B01' , 'B02' , 'B03' , 'B04' , 'B05' , 'B06' , 'B07' , 'B08' , 'B09' , 'B11' , 'B12' , 'B8A' ) print ( sentinel . info ( bands = \"B01\" ) . json ( exclude_none = True )) >>> { 'bounds' : [ - 69.98971880792764 , 47.761069480166995 , - 68.86723101847079 , 48.75300221903151 ], 'minzoom' : 8 , 'maxzoom' : 14 , 'band_metadata' : [[ \"B01\" , {}]], 'band_descriptions' : [[ \"B01\" , {}]], 'dtype' : 'uint16' , 'nodata_type' : 'Nodata' , 'colorinterp' : [ 'gray' ] } print ( sentinel . statistics ( bands = \"B8A\" )[ \"B8A\" ] . json ()) >>> { 'min' : 1.0 , 'max' : 19753.0 , 'mean' : 2873.8173758756675 , 'count' : 653216.0 , 'sum' : 1877223491.0 , 'std' : 2680.2546389126283 , 'median' : 2919.0 , 'majority' : 117.0 , 'minority' : 9913.0 , 'unique' : 11767.0 , 'histogram' : [ [ 281576.0 , 154185.0 , 130600.0 , 49758.0 , 30001.0 , 6851.0 , 242.0 , 1.0 , 1.0 , 1.0 ], [ 1.0 , 1976.2 , 3951.4 , 5926.6 , 7901.8 , 9877.0 , 11852.2 , 13827.4 , 15802.6 , 17777.8 , 19753.0 ] ], 'valid_percent' : 62.3 , 'masked_pixels' : 395360.0 , 'valid_pixels' : 653216.0 , 'percentile_98' : 9320.699999999953 , 'percentile_2' : 106.0 } img = sentinel . tile ( 77 , 89 , 8 , bands = \"B01\" ) assert img . data . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , bands = ( \"B01\" , \"B02\" ))) # Result is in form of # [ # value for band 1 in band B01, # value for band 1 in band B02 # ] > [ 1230 , 875 ] # Working with Expression img = sentinel . tile ( 77 , 89 , 8 , expression = \"B01/B02\" ) assert igm . data . shape == ( 1 , 256 , 256 ) print ( sentinel . point ( - 69.41 , 48.25 , expression = \"B01/B02\" )) > [ 1.424673784104389 ]","title":"L1C - JPEG2000"},{"location":"usage/sentinel/#l2a-jpeg2000","text":"Warnings JPEG2000 format is not Cloud Optimized , numerous GET requests will be needed to read such format which could result in important cost. bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP bands are not supported. import rasterio from rio_tiler_pds.sentinel.aws import S2JP2Reader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S2JP2Reader ( \"S2A_L2A_20170729_19UDP_0\" ) as sentinel : # bounds and metadata are derived from the tileInfo.json file stored with the JPEG2000 print ( type ( sentinel )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L2AReader '> print ( type ( sentinel . tileInfo )) >>> dict print ( type ( sentinel . datageom )) >>> dict print ( sentinel . info ( bands = \"B01\" ) . dict ( exclude_none = True )) >>> { \"bounds\" : [ - 69.98831359398795 , 47.7610811323474 , - 68.86723101847079 , 48.75300225264652 ], \"minzoom\" : 8 , \"maxzoom\" : 14 , \"band_metadata\" : [[ \"B01\" , {}]], \"band_descriptions\" : [[ \"B01\" , \"\" ]], \"dtype\" : \"uint16\" , \"nodata_type\" : \"Nodata\" , \"colorinterp\" : [ \"gray\" ] }","title":"L2A - JPEG2000"},{"location":"usage/sentinel/#cog-only-l2a-available-for-now","text":"bands: B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A Note: AOT, SCL, WVP STAC assets are not supported. Note: the B10 band is the cirrus band and is only supported for L1C, not L2A. from rio_tiler_pds.sentinel.aws import S2COGReader with S2COGReader ( \"S2A_29RKH_20200219_0_L2A\" ) as sentinel : print ( type ( sentinel )) >>> < class ' rio_tiler_pds . sentinel . aws . sentinel2 . S2L2ACOGReader '> print ( sentinel . bands ) >>> ( 'B01' , 'B02' , 'B03' , 'B04' , 'B05' , 'B06' , 'B07' , 'B08' , 'B09' , 'B11' , 'B12' , 'B8A' ) # bounds and metadata are derived from the STAC item stored with the COG print ( type ( sentinel . stac_item )) >>> dict","title":"COG (Only L2A available for now)"},{"location":"usage/sentinel/#sentinel-1-aws","text":"import rasterio from rio_tiler_pds.sentinel.aws import S1L1CReader with rasterio . Env ( AWS_REQUEST_PAYER = \"requester\" ): with S1L1CReader ( \"S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B\" ) as sentinel : print ( sentinel . bands ) > ( 'vv' , 'vh' ) print ( sentine . bounds ) > ( 75.605247 , 9.225784 , 78.203903 , 11.190425 ) print ( type ( sentinel . productInfo )) > dict print ( sentinel . _get_band_url ( \"vv\" )) > 's3://sentinel-s1-l1c/GRD/2018/7/16/IW/DV/S1A_IW_GRDH_1SDV_20180716T004042_20180716T004107_022812_02792A_FD5B/measurement/iw-vv.tiff'","title":"Sentinel 1 - AWS"}]}